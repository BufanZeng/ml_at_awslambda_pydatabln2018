service:
  name: pydatabln2018-ws-ml-to-lambda

plugins:
  - serverless-python-requirements
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: python3.6
  region: eu-central-1

  profile: ${opt:profile, "default"}
  role: DeployingMLtoLambdaRole
  memorySize: 256
  timeout: 10
  tracing: true

  ## TODO: Edit this to setup your deployment bucket
  deploymentBucket:
    name: eigelbdemo

  stackTags:
    service: ${ self:service }

package:
  # define here which folders and files you want to package (we only need ./categorizer_lambda for this demo)
  exclude:
    - '**/*'
  include:
    - 'categorizer_lambda/**'

custom:
  pythonRequirements:
    dockerizePip: 'true'
    fileName: Pipfile
    dockerUsePipenv: true
    dockerFile: Dockerfile
  git-repo: https://github.com/bweigel/ml_at_awslambda_pydatabln2018

functions:
  categorizer_lambda:
    name: categorizer_lambda
    description: >
      categorize texts into spam or ham using a naive Bayes classifier
    handler: categorizer_lambda.main.lambda_handler
    events:
      - http:
          path: spamorham
          method: POST
    environment:
      MODEL_BUCKET: ${self:provider.deploymentBucket}
      ## TODO: Edit these environmental variables to tell your code where the model is deployed (see ./categorizer_lambda/main.py)
      MODEL_VECTORIZER_PATH: pydatabln2018/tfidf_vectorizer.pkl
      MODEL_CLASSIFIER_PATH: pydatabln2018/naive_bayes_clf.pkl


resources:
  Resources:
    DeployingMLtoLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /service/
        RoleName: pydatabln2018-ws-ml-to-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: pydatabln2018-ws-ml-to-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join': [':', ['arn:aws:logs', Ref: 'AWS::Region', Ref: AWS::AccountId, 'log-group:/aws/lambda/*:*:*']]
                - Effect: Allow
                  Action:
                    - "xray:PutTraceSegments"
                    - "xray:PutTelemetryRecords"
                  Resource:
                    - "*"
                -  Effect: Allow
                   Action:
                     - s3:PutObject
                     - s3:GetObject
                   Resource:
                       - "arn:aws:s3:::${self:provider.deploymentBucket}/*"

